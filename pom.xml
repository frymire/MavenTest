<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.frymire</groupId>
  <artifactId>POMTest</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>POM Test</name>
  <description>This is a test of Maven and POMs.</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>


  <dependencies>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>

  </dependencies>


  <build>

    <!-- Filter resources to read POM values for the build. -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <!-- Specify a file to reference to get new properties. -->
    <filters>
      <filter>src/main/filters/filter.properties</filter>
    </filters>

    <plugins>

      <!-- Tell the jar plug-in how to set the application entry point. -->
      <plugin>
        <!-- Generally, you need to provide a groupId for each plugin, but 
          org.apache.maven.plugins is the default, and may be omitted. -->
        <!-- <groupId>org.apache.maven.plugins</groupId> -->
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <archive>

            <!-- Either specify a file with entries to append to the manifest 
              <manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile> -->

            <!-- ...or specify the entry point directly. -->
            <manifest>
              <mainClass>io.github.frymire.Hi</mainClass>
            </manifest>

          </archive>
        </configuration>
      </plugin>

      <!-- Let's generate javadoc as part of the build, rather than relying 
        only on the site lifecycle (see below). -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.10.4</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <reportOutputDirectory>${project.build.directory}/site</reportOutputDirectory>
          <destDir>../doc</destDir>
          <additionalparam>-Xdoclint:none</additionalparam>
        </configuration>
      </plugin>

      <!-- Zip outputs into a single binary. -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <!-- Be sure to bind this to a stage where all necessary resources are available. -->
            <phase>package</phase>
            <goals><goal>single</goal></goals>
          </execution>
        </executions>
        <configuration>

          <!-- 'bin' will zip/tar.gz/tar.bz2 all jars with README, LICENSE, and NOTICE files. -->
          <!-- 'project' provides everything but the target folder, so that someone else can compile the project. --> 
          <!-- 'src' provides just the source files. -->
          <descriptorRefs>          
            <!-- TODO: <descriptorRef>project-with-dependencies</descriptorRef>  -->
            <!-- <descriptorRef>bin</descriptorRef> -->
            <!-- <descriptorRef>project</descriptorRef> -->
            <!-- <descriptorRef>src</descriptorRef>  -->
          </descriptorRefs>
          
            <!-- Use a custom assembly. -->
          <descriptors>
            <descriptor>FryZip.xml</descriptor>
          </descriptors>
          
        </configuration>
      </plugin>

    </plugins>

  </build>


  <reporting>

    <plugins>

      <plugin>

        <!-- Automatically generate javadoc when 'mvn site' is called. -->
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.10.4</version>

        <!-- Specify a custom location for the documentation, and disable 
          oppressive javadoc doclint checks that result in missing documentation. -->
        <configuration>
          <reportOutputDirectory>${project.build.directory}/site</reportOutputDirectory>
          <destDir>../doc</destDir>
          <additionalparam>-Xdoclint:none</additionalparam>
        </configuration>

      </plugin>

    </plugins>

  </reporting>


</project>
